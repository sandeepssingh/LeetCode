#include <iostream>
#include <stdio.h>
#include <stdlib.h>
#include <string> 
#include<queue>  
#include<map> 
#include <list>
#include <vector>
#include<iostream> 
#include <sstream>
#include <ctype.h> 
#include <iterator> 
#include <deque> 
#include <algorithm> 
#include<map> 
#include <cstring>
#include <unordered_set> 
#include <unordered_map> 
using namespace std;
struct Comp
{
	bool operator()(const pair<int, string>&p, const pair<int, string>&q) const
	{	
		if (p.first == q.first)
		{
			return p.second > q.second;
		}
		return p.first > q.first;
	}
};
struct TrieNode {
	map<string, TrieNode*> characters;
	map<string, int> count;
};
class AutocompleteSystem
{
	TrieNode* root;
	string prefix = "";
public:
	AutocompleteSystem(vector<string>& sentences, vector<int>& times) {
		root = new TrieNode();
		
		for (int i = 0; i < sentences.size(); i++)
		{
			Add(sentences[i], times[i]);
		}
	}
	void Add(string str, int count = 1)
	{
		TrieNode* curr = root;
		for (int i = 0; i < str.length(); i++)
		{
			if (curr->characters.find(to_string(str[i])) == curr->characters.end())
			{
				curr->characters[to_string(str[i])] = new TrieNode();
			}
			curr = curr->characters[to_string(str[i])];
			if (curr->count.find(to_string(str[i])) == curr->count.end())
			{
				curr->count[to_string(str[i])] = 0;
			}
			curr->count[to_string(str[i])]++;
		}
	}
	vector<string> input(char c) {
		vector<string> res;
		if (c == '#')
		{
			Add(prefix, 1);
			prefix = "";
			return res;
		}
		prefix += c;
		TrieNode* curr = root;
		for (int i = 0; i < prefix.length(); i++)
		{
			if (curr->characters.find(to_string(prefix[i])) != curr->characters.end())
			{
				curr = curr->characters[to_string(prefix[i])];
			}
			else {
				res;
			}
		}

		priority_queue <pair<int, string>, vector<pair<int, string>>, Comp> pq;
		map<string, int>::iterator it;
		for (it = curr->count.begin(); it!= curr->count.end(); it++)
		{
			pq.push(make_pair(it->second, it->first));
		}

		for (int i = 0; i < 3; i++)
		{
			pair<int, string> result = pq.top();
			res.push_back(result.second);
			pq.pop();
		}
		return res;
	}

};