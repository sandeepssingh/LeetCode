#include <iostream>
#include <stdio.h>
#include <stdlib.h>
#include <string> 
#include<queue>  
#include<map> 
#include <list>
#include <vector>
#include<iostream> 
#include <sstream>
#include <unordered_map>
using namespace std;

class Node {
public:
	int val;
	vector<Node*> neighbors;

	Node() {
		val = 0;
		neighbors = vector<Node*>();
	}

	Node(int _val) {
		val = _val;
		neighbors = vector<Node*>();
	}

	Node(int _val, vector<Node*> _neighbors) {
		val = _val;
		neighbors = _neighbors;
	}
};
class Solution {
public:
	//BFS Solution
	Node* cloneGraph(Node* node) {

		if (!node) {
			return NULL;
		}
		Node* copy = new Node(node->val, {});
		copies[node] = copy;
		queue<Node*> todo;
		todo.push(node);
		while (!todo.empty()) {
			Node* cur = todo.front();
			todo.pop();
			for (Node* neighbor : cur->neighbors) {
				if (copies.find(neighbor) == copies.end()) {
					copies[neighbor] = new Node(neighbor->val, {});
					todo.push(neighbor);
				}
				copies[cur]->neighbors.push_back(copies[neighbor]);
			}
		}
		return copy;
	}
private:
	unordered_map<Node*, Node*> copies;
	
};